"""
Задание 2. Подсчитать четные и нечетные цифры введенного натурального числа.
Например, если введено число 34560, то у него 3 четные цифры
(4, 6 и 0) и 2 нечетные (3 и 5).
Подсказка:
На каждом шаге вам нужно 'доставать' из числа очередную цифру
и смотреть является ли она четной или нечетной.
При этом увеличиваем соответствующий счетчик
Пока все числа не извлечены, рекурсивные вызовы продолжаем
Условие завершения рекурсии - все числа извлечены
Используем операции % //. Операции взятия по индексу применять нельзя.
Решите через рекурсию. В задании нельзя применять циклы.
Пример:
Введите число: 123
Количество четных и нечетных цифр в числе равно: (1, 2)
"""

def search_even_odd(a, count1, count2):
    b = 0
    if a < 10 and a % 2 == 0:
        count1 += 1
        print(f'общее количество четных цифр: {count1}')
        print(f'общее количество нечетных цифр:{count2}')
        return
    elif a < 10 and a % 2 != 0:
        count2 += 1
        print(f'общее количество нечетных цифр:{count2}')
        print(f'общее количество четных цифр: {count1}')
        return
    b = a % 10
    a = a // 10
    if b % 2 == 0:
        count1 += 1
    elif b % 2 != 0:
        count2 += 1
    print(f'число: {b}, четное:{count1}, нечетное :{count2}')
    search_even_odd(a, count1, count2)


count_even = 0
count_odd = 0
a = int(input('Введите число: '))
search_even_odd(a,count_even, count_odd)

# НАМНОГО  ПРОЩЕ И МЕНЬШЕ КОДА ЕСЛИ СДЕЛАТЬ ЧЕРЕЗ ШАГ С ВЫЧЕТАНИЕМ ИЗ ЧИСЛА